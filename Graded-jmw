// 2019.12.04 - Week 1, Day 2 Homework
-------------------------------Graded JMW: Fri 8:44
// SECTION 1
// DRY = Don't Repeat Yourself 
// It's important because we want to avoid repititious code in our programs.
// Loops are one method we use ensure we have DRY code.
============================== {Correct}==========
// Difference among const, let and var
// they are all used for variable declarations.
// const:  the identifier cannot be reassigned
// let:  variable declaration; the variable's scope is limited to the block in which it is declared.
// var:  variable declaration but scope can be global or local to an entire function.

============================== {Correct}==========
// SECTION 2
const a = 4;
const b = 53;
const c = 57;
const d = 16;
const e = 'Kelvin';
const f = false;

/* 
a < b;
c > d;
'Name' == 'Name';
a < b < c;
a + a < d;
e !== 'Kevin';
48 !== '48';
f != e;
*/

console.log( a < b);
console.log( c > d);
console.log('Name' == 'Name');
------**------------  === This is used for explicitly equal. == what you used it right, however the better more accurate convention is using the ===
console.log(a<b<c);
console.log(a+a < d);
console.log(e != 'Kevin');
console.log(48 !== '48');
console.log(f != e);
============================== {Correct}==========

let g = 0;

console.log(g);

// chose let because we discussed how var was an older construct now falling out of favor.
============================== {Correct}==========

k=0;
console.log(k);
// hmmm, we don't get an error if we skip the let/var/const declaration.
============================== {Correct}==========

/*
10 = g;  This throws a syntax error at runtime
*/
----feel free to elaborate- why? - talk about the declaration(s)
============================== {Correct}==========

/* Section 2 - Challenge - use only > , < and === to evaluate the expression to true
a_ (b || f) _ !f && e _ c
*/
---i know it was a bit of a mess but attempt the solution anyway. try looking at documentation about string comparison maybe.
============================== {InComplete}==========

// SECTION 3
/*
while (true) {
	console.log('Do not run this loop');
}
ANS:  This is an infinite loop because there's nothing in the code block to
change the value of the boolean expression.

*/
============================== {Correct}==========

/*
const runProgram = true;
while (runProgram) {
	console.log('Do not run this loop');
    runProgram = false;
}
ANS:  This will generate an error at runtime because runProgram cannot be assigned a new value.
*/

---shows you actually RAN the sequence.wellDone();
============================== {Correct}==========

let letters = "A";
let i = 0;

// iterate through the code block while the value of i is less than 20
while (i < 20) {
    // can we concatenate using this notation?  Maybe.
	letters += "A";
	i++;
}
// I suspect we can concatenate therefore, this will result in a row of 20 capital A printed
// on the screen.
console.log(letters);

// we actually got 21 capital A printed to the screen.

------- => absolutely. but dont forget anout index[0],.
============================== {Correct}==========
// SECTION 4

// Key differences between for and while loop
// 1. For loop runs a specified number of iterations.
// 2. Both can be infinite if the exit condition always evaluates to true

// First part of control panel:  let i=0
// Second part of control panel:  i < 100
// third part of control panel:  i++

for (let counter=0; counter <= 999; counter++){
    console.log( counter);
}
============================== {Correct}==========

// SECTION 4 BONUS #1 - Backslash vs. Forward slash
// backslash can be used as an escape character so the special character in the string
// gets printed to the console.
============================== {Correct}==========

// For loop in reverse
for (let decrement = 999; decrement >= 0; decrement--){
    console.log(decrement);
}
============================== {Correct}==========
// for loop that prints current value to the console
let startValue = 10;
for (let k=1; k<=startValue; k++){
    console.log("The value of k is: "+ k + " of " + startValue);
}
============================== {Correct}==========

// SECTION 4 BONUS #2 - For Loop that prints current value to console
// String Interpolation/Template Literals

let startValue2 = 10;
for (let k=1; k<=startValue2; k++){
    console.log(`The value of k is: ${k} of ${startValue2}`);
}
============================== {Correct}==========
// Iteration
const StarWars = ["Han", "C3PO", "R2D2", "Luke", "Leia", "Anakin"];
let swLength = StarWars.length;

for (let j=0; j< swLength; j++){
    console.log(StarWars[j]);
}
============================== {Correct}==========

for (let z=0; z<swLength; z++){
    console.log(`${StarWars[z]} ${z}`);
}
============================== {Correct}==========

// Iteration Bonus - Iterate over every second element in the array beginning at zero
for (let z=0; z<swLength; z+=2){
    console.log(`${StarWars[z]} ${z}`);
}
============================== {Correct}==========
--- Great Job Tara, This seems like you are grasping the concepts inclass well. .
Make sure you are taking personal time to expand concepts further, if things are moving slow for you.
The more active you are with your learning, the easier these concepts stick!!

GreatJob!
          - jmw.





